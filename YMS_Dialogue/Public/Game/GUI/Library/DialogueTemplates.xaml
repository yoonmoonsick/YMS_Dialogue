<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
                    mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Theme/DialogShared.Styles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- body text style -->
    <Style x:Key="Dialogue.BodyTextStyle" TargetType="TextBlock" BasedOn="{StaticResource Dialogue.BodyTextStyleBase}">
        <Setter Property="FontSize" Value="36"/>
        <Setter Property="noesis:Text.Stroke" Value="{StaticResource Dialogue.Stroke}" />
        <Setter Property="noesis:Text.StrokeThickness" Value="8" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <!-- Put all the Controller setters here -->
                <Setter Property="FontSize" Value="36"/>
                <Setter Property="noesis:Text.Stroke" Value="#AC000000" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- answer text style -->
    <Style x:Key="Dialogue.AnswerTextStyle" TargetType="TextBlock" BasedOn="{StaticResource Dialogue.AnswerTextStyleBase}">
        <Setter Property="noesis:Text.Stroke" Value="{StaticResource Dialogue.Stroke}"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="8" />
        <Setter Property="FontSize" Value="36"/>
        <Setter Property="LineHeight" Value="{Binding DataContext.CurrentPlayer.UIOptions.DialogueFontSizeModifier, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource Dialogue.Answer.LineHeight}}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding SuggestedByPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_guestTxtColor}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                 <!-- Put all the Controller setters here -->
                <Setter Property="FontSize" Value="36"/>
                <Setter Property="noesis:Text.Stroke" Value="#AC000000" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Dialogue.HighlightedAnswerTextStyle" TargetType="TextBlock" BasedOn="{StaticResource Dialogue.AnswerTextStyle}">
        <Setter Property="Foreground" Value="{StaticResource Dialogue.Answer.Highlighted}" />
    </Style>

    <Style x:Key="Dialogue.AnswerPrefixTextStyle" TargetType="TextBlock" BasedOn="{StaticResource Dialogue.AnswerTextStyle}">
        <Setter Property="Padding" Value="0,0,12,0" />
    </Style>

    <!-- suggestion prefix style -->
    <Style x:Key="Dialogue.SuggestionTextStyle" TargetType="TextBlock" BasedOn="{StaticResource Dialogue.AnswerTextStyle}">
        <Setter Property="FontSize" Value="36"/>
        <Setter Property="LineHeight" Value="{Binding DataContext.CurrentPlayer.UIOptions.DialogueFontSizeModifier, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource Dialogue.SuggestedAnswer.LineHeight}}" />

        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <!-- Put all the Controller setters here -->
                <Setter Property="FontSize" Value="36"/>
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- NOTE: this delay is a hack until we have proper dialogue data sync with timelines
         see: https://larianstudios.atlassian.net/browse/GUS-127995
    -->
    <Storyboard x:Key="Dialogue.AnimShowAnswers" FillBehavior="HoldEnd">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Static Visibility.Visible}" />
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <!-- answer listbox item template -->
    <Style x:Key="AnswerListboxItem" TargetType="ls:LSListBoxItem" BasedOn="{StaticResource {x:Type ls:LSListBoxItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSListBoxItem">
                    <ControlTemplate.Resources>

                        <BitmapImage x:Key="PollMostVotedImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_navRight_h.png"/>
                        <BitmapImage x:Key="SelectedArrow" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/answerArrow_active.png"/>
                        <BitmapImage x:Key="PollBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/bar_poll_bg.png"/>
                        <BitmapImage x:Key="PollBarFill" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/bar_poll_fill.png"/>

                    </ControlTemplate.Resources>

                    <!-- layout -->
                    <Grid x:Name="AnswerRoot" Width="2120">
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="AnswerRowDefinition"/>
                            <RowDefinition x:Name="SuggestionRowDefinition"/>
                        </Grid.RowDefinitions>

                        <Grid.Resources>
                            <Storyboard x:Key="ArrowBounce" TargetName="PollMostVoted">
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="-16" Duration="0:0:0.3" DecelerationRatio="0.5" AutoReverse="True" RepeatBehavior="Forever"/>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0.6" Duration="0:0:0.3" AutoReverse="True" RepeatBehavior="Forever"/>
                            </Storyboard>
                        </Grid.Resources>

                        <ls:LSWrapPanel Grid.Row="0">

                            <ls:LSButton BoundEvent="{Binding BoundEvent}"
                                         Command="{Binding DataContext.SelectAnswerCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"
                                         Visibility="{Binding Visibility, RelativeSource={RelativeSource AncestorType={x:Type Expander}}}"
                                         BorderBrush="{x:Null}" BorderThickness="0"
                                         HorizontalContentAlignment="Left" HorizontalAlignment="Left"
                                         Margin="0,0,-52,0">

                                <Grid x:Name="AnswerHolder" MaxWidth="2120">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <Image Grid.Column="0" Name="AnswerTextArrow" Source="{StaticResource SelectedArrow}" Visibility="Hidden" Stretch="None" VerticalAlignment="Center" Margin="-24,0,-16,0"/>

                                    <!-- Poll Data -->
                                    <DockPanel x:Name="PollResultColumn" Grid.Column="1" Margin="0,0,20,0" MinWidth="132" VerticalAlignment="Center" LastChildFill="False" Visibility="Collapsed">
                                        <TextBlock DockPanel.Dock="Right" Name="AnswerPollPercent" Style="{StaticResource Dialogue.AnswerTextStyle}" Foreground="{StaticResource Dialogue.Poll.Normal}">
                                            <Run Text="{Binding PollResultPercent, Converter={StaticResource FloatToPercentStringConverter}}" />
                                            <Run Text="%" />
                                        </TextBlock>
                                        <Image DockPanel.Dock="Right" x:Name="PollMostVoted" Source="{StaticResource PollMostVotedImage}"
                                               Height="48" Stretch="Uniform" Visibility="Hidden" Effect="{StaticResource HUD.DropShadow}" Margin="0,-2,0,2">
                                            <Image.RenderTransform>
                                                <TranslateTransform/>
                                            </Image.RenderTransform>
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Loaded">
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource ArrowBounce}" ControlStoryboardOption="Play"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </Image>
                                    </DockPanel>

                                    <!-- Answer Prefix -->
                                    <TextBlock Grid.Column="2" Name="AnswerTextPrefix" Style="{StaticResource Dialogue.AnswerPrefixTextStyle}" Margin="20,0,0,0">
                                        <Run Text="{Binding AnswerIdx, Converter={StaticResource AddConverter}, ConverterParameter='1'}" /><Run Text=". " />
                                    </TextBlock>

                                    <!-- Answer Line -->
                                    <StackPanel Grid.Column="3">
                                        <TextBlock x:Name="AnswerText" Style="{StaticResource Dialogue.AnswerTextStyle}">
                                            <b:Interaction.Behaviors>
                                                <ls:CtxTransStringRunGeneratorBehavior Source="{Binding CtxAnswer}">
                                                    <ls:CtxTransStringRunGeneratorBehavior.ParamRunStyle>
                                                        <Style TargetType="ls:LSRun">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Type}" Value="Tag">
                                                                    <Setter Property="Text" Value="{Binding Text, StringFormat='{}[{0}] ', Converter={StaticResource StringToUpperConverter}}"/>
                                                                    <Setter Property="ToolTip" >
                                                                        <Setter.Value>
                                                                            <ls:LSTooltip Placement="Relative" VerticalOffset="0" HorizontalOffset="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Converter={StaticResource MultiplierConverter}, ConverterParameter=-1}" Content="{Binding Path=Inline.DataContext.TooltipCustomData, RelativeSource={RelativeSource Mode=Self}}" />
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="ToolTipService.PlacementTarget" Value="{Binding ElementName=AnswerHolder}"/>
                                                                    <Setter Property="Foreground" Value="{StaticResource Dialogue.Answer.Tag}" />
                                                                    <Setter Property="FontSize" Value="36"/>
                                                                    <Setter Property="noesis:Text.Stroke" Value="{StaticResource Dialogue.Stroke}"/>
                                                                    <Setter Property="noesis:Text.StrokeThickness" Value="8"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding Type}" Value="Tag"/>
                                                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=AnswerText}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Foreground" Value="{StaticResource Dialogue.Answer.Highlighted}"/>
                                                                </MultiDataTrigger>
                                                                <DataTrigger Binding="{Binding DataContext.SuggestedByPlayers.Count, RelativeSource={RelativeSource AncestorType={x:Type TextBlock}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                                                    <Setter Property="Foreground" Value="{StaticResource LS_guestTxtColor}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding Type}" Value="Tag"/>
                                                                        <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ls:LSListBoxItem}}" Value="True"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Foreground" Value="{StaticResource Dialogue.Answer.Highlighted}"/>
                                                                </MultiDataTrigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Foreground" Value="{StaticResource Dialogue.Answer.TagHighlighted}"/>
                                                                </Trigger>
                                                                <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                                                    <!-- Put all the Controller setters here -->
                                                                    <Setter Property="FontSize" Value="36" />
                                                                    <Setter Property="noesis:Text.Stroke" Value="#AC000000" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ls:CtxTransStringRunGeneratorBehavior.ParamRunStyle>
                                                </ls:CtxTransStringRunGeneratorBehavior>
                                            </b:Interaction.Behaviors>
                                        </TextBlock>

                                        <!-- Poll Percentage Bar -->
                                        <Canvas>
                                            <Grid Margin="0 -6 0 0">
                                                <ls:LSProgressBar Width="464" Height="16" Value="{Binding PollResultPercent, Mode=OneWay}" Maximum="1" Minimum="0" BorderBrush="Transparent">
                                                    <ls:LSProgressBar.Background>
                                                        <ImageBrush ImageSource="{StaticResource PollBarBackground}" />
                                                    </ls:LSProgressBar.Background>
                                                    <ls:LSProgressBar.Foreground>
                                                        <ImageBrush ImageSource="{StaticResource PollBarFill}" />
                                                    </ls:LSProgressBar.Foreground>
                                                </ls:LSProgressBar>
                                            </Grid>
                                            <Canvas.Style>
                                                <Style TargetType="Canvas">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding DataContext.Data.IsCommunityPollEnabled, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True" />
                                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowPollResults, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True" />
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Canvas.Style>
                                        </Canvas>
                                    </StackPanel>
                                </Grid>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="MouseEnter">
                                        <b:InvokeCommandAction Command="{Binding DataContext.HighlightAnswerCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}" />
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>

                            <!-- Player Suggestions -->
                            <ItemsControl x:Name="PlayerSuggestionsPanel" Margin="80,0,0,0" VerticalAlignment="Center" ItemsSource="{Binding SuggestedByPlayers}" Visibility="{Binding SuggestedByPlayers.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel Orientation="Horizontal" MaxWidth="1900"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="{x:Type ls:Player}">
                                        <StackPanel x:Name="SuggestionContainer" Orientation="Horizontal">
                                            <StackPanel.ToolTip>
                                                <ls:LSTooltip Content="{Binding DataContext.Name, ElementName=SuggestionContainer}" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="-8"/>
                                            </StackPanel.ToolTip>
                                            <Ellipse Fill="{Binding CommunityIcon}"
                                                     Height="{Binding DataContext.CurrentPlayer.UIOptions.DialogueFontSizeModifier, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource Dialogue.SuggestedAnswer.LineHeight}}"
                                                     Width="{Binding DataContext.CurrentPlayer.UIOptions.DialogueFontSizeModifier, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource Dialogue.SuggestedAnswer.LineHeight}}"/>
                                            <TextBlock Style="{StaticResource Dialogue.SuggestionTextStyle}" Text="{Binding Name}" VerticalAlignment="Center" Margin="12,0,0,0"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ls:LSWrapPanel>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Polling Triggers -->
                        <DataTrigger Binding="{Binding PollResultIsMostVoted}" Value="True">
                            <Setter TargetName="PollMostVoted" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Data.IsCommunityPollEnabled, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True" />
                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowPollResults, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PollResultColumn" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <!-- style when item is enabled and selected -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AnswerText" Property="Foreground" Value="{StaticResource Dialogue.Answer.Highlighted}" />
                            <Setter TargetName="AnswerTextPrefix" Property="Foreground" Value="{StaticResource Dialogue.Answer.Highlighted}" />
                            <Setter TargetName="AnswerPollPercent" Property="Foreground" Value="{StaticResource Dialogue.Poll.Highlighted}" />
                        </MultiTrigger>

                        <!-- style when item is selected by host-->
                        <DataTrigger Binding="{Binding HighlightedByHost}" Value="true">
                            <Setter TargetName="AnswerTextArrow" Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <!-- disabled behavior -->
                        <DataTrigger Binding="{Binding Enabled}" Value="False">
                            <!--<Setter Property="IsEnabled" Value="False" />-->
                            <Setter TargetName="AnswerText" Property="Foreground" Value="{StaticResource Dialogue.Answer.Disabled}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                            <!-- Put all the Controller setters here -->
                            <Setter TargetName="AnswerRoot" Property="Width" Value="1700"/>
                            <Setter TargetName="AnswerHolder" Property="Width" Value="1700"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller"/>
                                <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common"/>
                                <!-- 0.5625 = 16/9 ratio -->
                                <Condition Binding="{Binding DataContext.Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <!-- Put all the fullscreen Controller setters here -->
                            <Setter TargetName="AnswerRoot" Property="Width" Value="2120"/>
                            <Setter TargetName="AnswerHolder" Property="Width" Value="2120"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- base button -->
    <Style x:Key="Dialogue.BaseButtonStyle" TargetType="{x:Type Button}">
        <Style.Resources>
            <!-- default images; these are meant to be overridden by derived styles -->
            <ImageBrush x:Key="imgNormal" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_d.png" Stretch="None" />
            <ImageBrush x:Key="imgHover" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_h.png" Stretch="None" />
            <ImageBrush x:Key="imgDisabled" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_disabled.png" Stretch="None" />
            <ImageBrush x:Key="imgPressed" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_p.png" Stretch="None" />
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_trade_d.png" />
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_trade_h.png" />
        </Style.Resources>

        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="120" />
        <Setter Property="Margin" Value="-8,0,-8,2" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="ClipToBounds" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- button images are larger than what appeared on guide image -->
                    <Border x:Name="img" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderBrush="{x:Null}" BorderThickness="0" Background="{StaticResource imgNormal}">
                        <Image x:Name="icon" Source="{DynamicResource imgIcon}" Width="auto" Height="auto" Stretch="None" SnapsToDevicePixels="True" Margin="-2,0,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgHover}"/>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource imgIconHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgPressed}"/>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource imgIconHover}"/>
                            <Setter TargetName="icon" Property="Margin" Value="-2,6,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgDisabled}"/>
                            <Setter TargetName="icon" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- base toggle button -->
    <Style x:Key="Dialogue.BaseToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Style.Resources>
            <!-- default images; these are meant to be overridden by derived styles -->
            <ImageBrush x:Key="imgNormal" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_d.png" Stretch="None" />
            <ImageBrush x:Key="imgHover" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_h.png" Stretch="None" />
            <ImageBrush x:Key="imgDisabled" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_disabled.png" Stretch="None" />
            <ImageBrush x:Key="imgPressed" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_p.png" Stretch="None" />
            <ImageBrush x:Key="imgChecked" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/btn_round_p.png" Stretch="None" />
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_trade_d.png" />
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_trade_h.png" />
        </Style.Resources>

        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="120" />
        <Setter Property="Margin" Value="-8,0,-8,0" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="ClipToBounds" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <!-- button images are larger than what appeared on guide image -->
                    <Border x:Name="img" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderBrush="{x:Null}" BorderThickness="0" Background="{StaticResource imgNormal}">
                        <Image x:Name="icon" Source="{DynamicResource imgIcon}" Width="auto" Height="auto" Stretch="None" SnapsToDevicePixels="True" Margin="-2,0,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgHover}"/>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource imgIconHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgPressed}"/>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource imgIconHover}"/>
                            <Setter TargetName="icon" Property="Margin" Value="-2,3,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgDisabled}"/>
                            <Setter TargetName="icon" Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgChecked}"/>
                            <Setter TargetName="icon" Property="Margin" Value="-2,6,0,0"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- trade button -->
    <Style x:Key="TradeButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource Dialogue.BaseButtonStyle}">
        <Style.Resources>
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_trade_d.png" />
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_trade_h.png" />
        </Style.Resources>
    </Style>

    <!-- GameMenu button -->
    <Style x:Key="GameMenuButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource Dialogue.BaseButtonStyle}">
        <Style.Resources>
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_menu_d.png" />
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_menu_h.png" />
        </Style.Resources>
    </Style>

    <!-- history button -->
    <Style x:Key="HistoryButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource Dialogue.BaseButtonStyle}">
        <Style.Resources>
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_history_d.png"/>
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_history_h.png" />
        </Style.Resources>
    </Style>

    <!-- attack button -->
    <Style x:Key="AttackButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource Dialogue.BaseButtonStyle}">
        <Style.Resources>
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_war.png"/>
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_war.png" />
        </Style.Resources>
    </Style>

    <!-- expand characters button -->
    <Style x:Key="Dialogue.ExpandCharactersButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Dialogue.BaseToggleButtonStyle}">
        <Style.Resources>
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_charSwitch_d.png" />
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/ico_charSwitch_h.png" />
        </Style.Resources>
    </Style>

    <!-- poll button -->
    <Style x:Key="Dialogue.PollButtonStyle" TargetType="{x:Type Button}">
        <Style.Resources>
            <ImageBrush x:Key="imgNormal" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/btn_roundProgress_d.png" Stretch="None" />
            <ImageBrush x:Key="imgHover" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/btn_roundProgress_h.png" Stretch="None" />
            <ImageBrush x:Key="imgDisabled" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/btn_roundProgress_disabled.png" Stretch="None" />
            <ImageBrush x:Key="imgPressed" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/btn_roundProgress_p.png" Stretch="None" />
            <BitmapImage x:Key="imgIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/ico_poll_dialogue_d.png" />
            <BitmapImage x:Key="imgIconHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/ico_poll_dialogue_h.png" />
        </Style.Resources>

        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="132" />
        <Setter Property="Height" Value="132" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="img" Background="{StaticResource imgNormal}">

                        <ls:LSPie Value="{Binding RemainingPollTimePercent}" SweepDirection="Clockwise" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <ls:LSPie.Style>
                                <Style TargetType="ls:LSPie">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </Style>
                            </ls:LSPie.Style>
                            <Image Source="/GustavNoesisGUI;component/Assets/CommunityPoll/btn_roundProgress_bar.png" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </ls:LSPie>
                        <Image x:Name="icon" Source="{DynamicResource imgIcon}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="auto" Height="auto" Stretch="None" SnapsToDevicePixels="True"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgHover}"/>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource imgIconHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgPressed}"/>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource imgIconHover}"/>
                            <Setter TargetName="icon" Property="Margin" Value="-2,6,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Background" Value="{StaticResource imgDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="Dialogue.DialogueNotification" TargetType="Control">
        <ItemsControl Name="DialogueNotification" ItemsSource="{Binding CurrentPlayer.UIData.Notification.DialogueNotifications}" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="120 120 0 0">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Grid x:Name="NotificationGrid">
                        <Grid.RenderTransform>
                            <TranslateTransform x:Name="Translate" X="0"/>
                        </Grid.RenderTransform>
                        <Grid.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation From="1.0" To="0.0" BeginTime="0:0:6" Duration="0:0:0.6" Storyboard.TargetName="NotificationEntry" Storyboard.TargetProperty="Opacity"/>
                                            <DoubleAnimation From="250" To="0" BeginTime="0:0:0" Duration="0:0:0.4" Storyboard.TargetName="Translate" Storyboard.TargetProperty="X">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Grid.Triggers>

                        <b:Interaction.Triggers>
                            <b:TimerTrigger EventName="Loaded" MillisecondsPerTick="6600" TotalTicks="1">
                                <b:InvokeCommandAction Command="{Binding DataContext.RemoveDialogueNotificationCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:TimerTrigger>
                        </b:Interaction.Triggers>

                        <ContentControl x:Name="NotificationEntry" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="80 20 0 0" Opacity="1.0" Style="{DynamicResource Notification.DialogTemplateSwitcher}"/>
                    </Grid>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </ControlTemplate>

    <ControlTemplate x:Key="Dialogue.BodyAndAnswersContainer">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="MoreIndicatorImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_moreIndicator.png"/>
        </ControlTemplate.Resources>
	    <Grid>

            <!-- Background for the dialogue to have it visible at all times -->
            <ls:LSNineSliceImage x:Name="BackgroundDialogue"
                                 Style="{StaticResource AccessibilityBackgroundStyle}"
                                 HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,50"
                                 Width="{Binding ActualWidth, ElementName=BodyAndAnswersContainer, Converter={StaticResource AddConverter}, ConverterParameter=120}"
                                 Height="{Binding ElementName=BodyAndAnswersContainer, Path=ActualHeight, Converter={StaticResource AddConverter}, ConverterParameter=60}"/>

            <StackPanel x:Name="BodyAndAnswersContainer" Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0 0 0 80">
                <TextBlock x:Name="DialogueFilename" Style="{StaticResource Dialogue.BodyTextStyle}"
                           Visibility="{Binding CurrentPlayer.UIData.ShowDialogCinematicContext, Converter={StaticResource BoolToVisibleConverter}}"
                           Foreground="{StaticResource Dialogue.Answer.Highlighted}" Margin="0,0,0,20" MaxWidth="2600"
                           Text="DIALOG: " >
                    <Run Text="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.DialogFileName, Mode=OneWay}"/>
                </TextBlock>
                <TextBlock x:Name="DialogueContext" Style="{StaticResource Dialogue.BodyTextStyle}"
                           Visibility="{Binding CurrentPlayer.UIData.ShowDialogCinematicContext, Converter={StaticResource BoolToVisibleConverter}}"
                           Foreground="{StaticResource Dialogue.Answer.Highlighted}" Margin="0,0,0,20" MaxWidth="2600"
                           Text="CONTEXT: " >
                    <Run Text="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.CinematicContextText, Mode=OneWay}"/>
                </TextBlock>

                <TextBlock x:Name="AnswerSelected" Style="{StaticResource Dialogue.BodyTextStyle}" Foreground="{StaticResource Dialogue.Answer.Highlighted}" MaxWidth="{Binding MaxWidth, ElementName=DialogueContainer}" Margin="0,0,0,32">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.SelectedAnswer.BodyText}">
                            <b:ControlStoryboardAction>
                                <b:ControlStoryboardAction.Storyboard>
                                    <Storyboard FillBehavior="Stop">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1.0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:4" Value="1.0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:4.4" Value="0.0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </b:ControlStoryboardAction.Storyboard>
                            </b:ControlStoryboardAction>
                            <b:ChangePropertyAction TargetName="AnswerSelected" PropertyName="Opacity" Value="0"/>
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                    <ls:TextBlockFormatter.SourceText>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h1942c58eg839fg468egaf51ge881c86e02ba"/>
                            <Binding Path="CurrentPlayer.SelectedCharacter.ActiveDialogue.SelectedAnswer.BodyText" Mode="OneWay"/>
                        </MultiBinding>
                    </ls:TextBlockFormatter.SourceText>
                </TextBlock>

                <Border x:Name="DialogueContainer" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue}" Visibility="Collapsed">
                    <TextBlock Style="{StaticResource Dialogue.BodyTextStyle}" x:Name="TextBodyContainer" Visibility="{Binding BodyText, Mode=OneWay, Converter={StaticResource StringToVisibilityConverter}}" MaxWidth="2400">
                        <Span x:Name="speakerName"/>
                        <Span ls:TextBlockFormatter.SourceText="{Binding BodyText, Mode=OneWay}"/>
                    </TextBlock>
                </Border>


                <!-- answers / press [spacebar] to continue -->
                <Grid x:Name="AnswersContainer" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue}" Margin="0,32,0,0" >

                    <Grid.Resources>
                        <ResourceDictionary>
                            <System:Boolean x:Key="AutoScrollSelectedIntoView">False</System:Boolean>
                        </ResourceDictionary>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- actual answers -->
                    <StackPanel Grid.Row="1">
                        <Control>
                            <Control.Style>
                                <Style TargetType="Control">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Control">
                                                <ls:LSListBox x:Name="answerList" ItemsSource="{Binding Answers}" SelectionMode="Single" SelectedItem="{Binding LocalHighlightedAnswer}"
                                                    ItemContainerStyle="{StaticResource AnswerListboxItem}" MaxHeight="490" Margin="26,0,0,0" AutoScrollSelectedIntoView="True">
                                                    <ls:LSListBox.Template>
                                                        <ControlTemplate TargetType="ls:LSListBox">
                                                            <ls:LSScrollViewer Template="{StaticResource ScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" x:Name="listScrollBar">
                                                                <ls:LSScrollViewer.Resources>
                                                                    <Style x:Key="DialogScrollBarThumbVertical" TargetType="{x:Type ls:LSThumb}" BasedOn="{StaticResource BaseScrollBarThumbVertical}">
                                                                        <Style.Resources>
                                                                            <ImageSource x:Key="Thumb" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroller_d.png</ImageSource>
                                                                            <ImageSource x:Key="HoverThumb" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroller_h.png</ImageSource>
                                                                            <ImageSource x:Key="PressedThumb" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroller_h.png</ImageSource>
                                                                        </Style.Resources>
                                                                    </Style>
                                                                    <Style x:Key="DialogScrollBarButtonVertical" TargetType="{x:Type ls:LSRepeatButton}" BasedOn="{StaticResource BaseScrollBarDownButtonVertical}">
                                                                        <Style.Resources>
                                                                            <ImageSource x:Key="DownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroll_up_d.png</ImageSource>
                                                                            <ImageSource x:Key="HoverDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroll_up_h.png</ImageSource>
                                                                            <ImageSource x:Key="PressedDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroll_up_h.png</ImageSource>
                                                                            <ImageSource x:Key="DisabledDownButton" >pack://application:,,,/GustavNoesisGUI;component/Assets/Dialogue/dialogue_scroll_up_d.png</ImageSource>
                                                                        </Style.Resources>
                                                                    </Style>
                                                                    <Style TargetType="{x:Type ScrollBar}">
                                                                        <Setter Property="MinWidth" Value="28"/>
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="ScrollBar">
                                                                                    <!-- This margin is to move the graphics of the scrollbar away from the edge to the center of the elements -->
                                                                                    <Grid Margin="-20,0,20,0">
                                                                                        <Grid.RowDefinitions>
                                                                                            <RowDefinition Height="Auto" />
                                                                                            <RowDefinition Height="*" />
                                                                                            <RowDefinition Height="Auto"/>
                                                                                        </Grid.RowDefinitions>
                                                                                        <ls:LSRepeatButton Grid.Row="0" Style="{StaticResource DialogScrollBarButtonVertical}" Command="ScrollBar.LineUpCommand" />
                                                                                        <Track Grid.Row="1" x:Name="PART_Track" ViewportSize="NaN" Margin="0,-30,0,0" IsDirectionReversed="true">
                                                                                            <Track.Thumb>
                                                                                                <ls:LSThumb Style="{StaticResource DialogScrollBarThumbVertical}" />
                                                                                            </Track.Thumb>
                                                                                        </Track>
                                                                                        <ls:LSRepeatButton Grid.Row="2" Style="{StaticResource DialogScrollBarButtonVertical}" Command="ScrollBar.LineDownCommand" Margin="0,30,0,0">
                                                                                            <RepeatButton.RenderTransform>
                                                                                                <ScaleTransform ScaleY="-1" CenterY="0.5"/>
                                                                                            </RepeatButton.RenderTransform>
                                                                                        </ls:LSRepeatButton>
                                                                                    </Grid>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Style>
                                                                </ls:LSScrollViewer.Resources>
                                                                <ItemsPresenter />
                                                            </ls:LSScrollViewer>
                                                        </ControlTemplate>
                                                    </ls:LSListBox.Template>
                                                </ls:LSListBox>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                                        <!-- Add more of your content here to change elements of the answerList -->
                                                        <Setter TargetName="answerList" Property="Margin" Value="0"/>
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <!-- trigger for when there's only a "continue"/"end" answer choice -->
                                        <DataTrigger Binding="{Binding WaitingForInput}" Value="True">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Control">
                                                        <ls:LSListBox x:Name="continueList" Margin="826,0,0,0" SelectionMode="Single" Background="Transparent" BorderBrush="Transparent" AutoScrollSelectedIntoView="{DynamicResource AutoScrollSelectedIntoView}">
                                                            <ls:LSListBoxItem DataContext="{Binding ContinueAnswer}" Style="{StaticResource AnswerListboxItem}" IsSelected="True" />
                                                        </ls:LSListBox>
                                                        <ControlTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                                                <Setter TargetName="continueList" Property="Margin" Value="0"/>
                                                        </DataTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Control.Style>
                        </Control>
                        <Image Source="{StaticResource MoreIndicatorImg}" Visibility="{Binding Answers.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='9'}" Stretch="None" HorizontalAlignment="Left" Margin="926,0,0,0"/>
                    </StackPanel>

                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <!-- Show answers -->
                                <DataTrigger Binding="{Binding ShowAnswers}" Value="True">
                                    <Setter Property="Visibility" Value="Visible" />
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="AnimShow" Storyboard="{StaticResource Dialogue.AnimShowAnswers}" />
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="AnimShow" />
                                    </DataTrigger.ExitActions>
                                </DataTrigger>

                                <!--For the options preview, no need to wait the small animation, we want the final result directly.-->
                                <DataTrigger Binding="{Binding Layout}" Value="OptionsPreview">
                                    <DataTrigger.EnterActions>
                                        <StopStoryboard BeginStoryboardName="AnimShow" />
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                </Grid>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIOptions.DisplaySpeaker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                <Setter TargetName="speakerName" Property="ls:TextBlockFormatter.SourceText">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h8af7b5c3gfbf4g41fegbcd4g84551412784c"/>
                            <Binding Path="SpeakerName" Mode="OneWay"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.Data.DialogTimelinesEnabled, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False">
                <Setter TargetName="speakerName" Property="ls:TextBlockFormatter.SourceText">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h8af7b5c3gfbf4g41fegbcd4g84551412784c"/>
                            <Binding Path="SpeakerName" Mode="OneWay"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Do NOT show speaker names in CC -->
            <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.CharacterCreationMode, ElementName=Dialogue}" Value="Creation">
                <Setter TargetName="speakerName" Property="ls:TextBlockFormatter.SourceText" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.CharacterCreationMode, ElementName=Dialogue_c}" Value="Creation">
                <Setter TargetName="speakerName" Property="ls:TextBlockFormatter.SourceText" Value="{x:Null}"/>
            </DataTrigger>

            <!-- FontSize width modifier -->
            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.DialogueFontSizeModifier, Converter={StaticResource GreaterThanConverter}}" Value="True">
                <Setter TargetName="TextBodyContainer" Property="MaxWidth" Value="2500" />
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.DialogueFontSizeModifier, Converter={StaticResource GreaterThanConverter}}" Value="True">
                <Setter TargetName="TextBodyContainer" Property="MaxWidth" Value="2600" />
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.DialogueFontSizeModifier, Converter={StaticResource GreaterThanConverter}}" Value="True">
                <Setter TargetName="TextBodyContainer" Property="MaxWidth" Value="3000" />
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.DialogueFontSizeModifier, Converter={StaticResource GreaterThanConverter}}" Value="True">
                <Setter TargetName="TextBodyContainer" Property="MaxWidth" Value="3600" />
            </DataTrigger>

            <!-- Controller modifiers -->
            <DataTrigger Binding="{Binding Data.UIInputMethod}" Value="Controller">
                <!-- Put all the split-screen Controller setters here -->
                <Setter TargetName="AnswersContainer" Property="MaxWidth" Value="1840" />
                <Setter TargetName="DialogueContainer" Property="MaxWidth" Value="1440" />
                <Setter TargetName="DialogueContext" Property="MaxWidth" Value="1440" />
                <Setter TargetName="DialogueContainer" Property="Margin" Value="0,0,0,20" />
                <Setter TargetName="BackgroundDialogue" Property="Width" Value="{Binding ActualWidth, ElementName=BodyAndAnswersContainer, Converter={StaticResource AddConverter}, ConverterParameter=160}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Data.UIInputMethod}" Value="Controller"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <!-- 0.5625 = 16/9 ratio -->
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <!-- Put all the fullscreen Controller setters here -->
                <Setter TargetName="AnswersContainer" Property="MaxWidth" Value="2800" />
                <Setter TargetName="DialogueContainer" Property="MaxWidth" Value="2500" />
                <Setter TargetName="DialogueContext" Property="MaxWidth" Value="2500" />
            </MultiDataTrigger>

            <!-- Showing the subtitles -->
            <DataTrigger Binding="{Binding CurrentPlayer.UIOptions.ShowSubtitles}" Value="True">
                <Setter TargetName="DialogueContainer" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowSubtitle}" Value="False">
                <Setter TargetName="DialogueContainer" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Selected answer triggers -->
            <DataTrigger Binding="{Binding Opacity, ElementName=AnswerSelected}" Value="0">
                <Setter TargetName="AnswerSelected" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.SelectedAnswer}" Value="{x:Null}">
                <Setter TargetName="AnswerSelected" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ActiveDialogueIsListening}" Value="False">
                <Setter TargetName="AnswerSelected" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Main background triggers -->
            <DataTrigger Binding="{Binding ActualWidth, ElementName=BodyAndAnswersContainer}" Value="0">
                <Setter TargetName="BackgroundDialogue" Property="Width" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ActualHeight, ElementName=BodyAndAnswersContainer}" Value="0">
                <Setter TargetName="BackgroundDialogue" Property="Height" Value="0"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Visibility, ElementName=AnswersContainer}" Value="Collapsed"/>
                    <Condition Binding="{Binding BodyText, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="BackgroundDialogue" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Dialogue.TradeNotificationControl">
        <ControlTemplate.Resources>
            <ImageSource x:Key="bg">pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/smallNotice_bg.png</ImageSource>
        </ControlTemplate.Resources>
        <ls:LSNineSliceImage x:Name="TradeNotification" ImageSource="{StaticResource bg}" Slices="40" Padding="80,20" MinWidth="736" MinHeight="136" Visibility="Collapsed">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource ScaledLargeFontSize}" TextWrapping="Wrap" MaxWidth="1400">
                <ls:TextBlockFormatter.SourceText>
                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                        <Binding Source="h7009aad2g6ddcg4538gb36eg69f1ff88c5a3"/>
                        <Binding Path="CurrentSpeakerCharacter.Name"/>
                    </MultiBinding>
                </ls:TextBlockFormatter.SourceText>
            </TextBlock>
        </ls:LSNineSliceImage>

        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentSpeakerCharacter.CharacterMode}" Value="InTrade"/>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="CurrentSpeakerCharacter"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TradeNotification" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>